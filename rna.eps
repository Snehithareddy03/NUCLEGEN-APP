%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Sat Feb 22 20:13:08 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
auguuacgauauagauacuuagauauauacuagauacgauauuauauauuauauauauauuucgacauaga\
) } def
/len { sequence length } bind def

/coor [
[116.56355286 283.27236938]
[114.60565948 268.40069580]
[112.64776611 253.52903748]
[110.68987274 238.65736389]
[108.73197937 223.78569031]
[96.79575348 214.95040894]
[94.59832001 199.89631653]
[103.94650269 187.43640137]
[101.98860931 172.56472778]
[100.03071594 157.69306946]
[98.07282257 142.82139587]
[96.11492920 127.94971466]
[94.15704346 113.07804108]
[85.79859924 101.86965179]
[90.97129059 88.87985229]
[89.01339722 74.00817871]
[87.05550385 59.13650513]
[78.39752197 54.15406418]
[73.24768829 45.75926208]
[72.74415588 36.06453705]
[76.87517548 27.43531799]
[84.51447296 21.91291428]
[84.51447296 6.91291475]
[84.51447296 -8.08708572]
[84.51447296 -23.08708572]
[84.51447296 -38.08708572]
[84.51447296 -53.08708572]
[84.51447296 -68.08708191]
[84.51447296 -83.08708191]
[76.77716827 -96.88726044]
[84.51447296 -109.61453247]
[84.51447296 -124.61453247]
[72.41989136 -134.52690125]
[69.57727051 -149.90394592]
[77.32881165 -163.48509216]
[92.01447296 -168.85774231]
[106.70013428 -163.48509216]
[114.45167542 -149.90394592]
[111.60905457 -134.52690125]
[99.51447296 -124.61453247]
[99.51447296 -109.61453247]
[107.25177002 -96.88726044]
[99.51447296 -83.08708191]
[99.51447296 -68.08708191]
[99.51447296 -53.08708572]
[99.51447296 -38.08708572]
[99.51447296 -23.08708572]
[99.51447296 -8.08708572]
[99.51447296 6.91291475]
[99.51447296 21.91291428]
[111.67958069 38.35027695]
[101.92717743 57.17861176]
[103.88507080 72.05028534]
[105.84295654 86.92195892]
[114.20140076 98.13034821]
[109.02870941 111.12014771]
[110.98660278 125.99182129]
[112.94449615 140.86349487]
[114.90238953 155.73516846]
[116.86028290 170.60684204]
[118.81817627 185.47851562]
[131.07269287 195.09437561]
[132.84642029 210.20425415]
[123.60365295 221.82780457]
[125.56154633 236.69947815]
[127.51943970 251.57113647]
[129.47732544 266.44281006]
[131.43522644 281.31448364]
[141.84222412 293.98834229]
[135.81738281 309.24066162]
[119.55853271 311.38116455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[15 54]
[16 53]
[17 52]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[31 41]
[32 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
